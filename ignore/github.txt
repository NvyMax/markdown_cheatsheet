/* Instructions for using GitHub and Visual Studio Code */

Depending on how you want to operate you may either

Create your files, application and folder structure first

OR

Create your GitHub Repo first
    - click + sign
    - enter repo name
    - choose options
    - do not add a read me
    - review steps
    - copy last two lines
            - git remote (nothing should come up)
            - git remote add origin https://github.com/NVyMax/NAME.git (input gitname)
            - git remote (should say origin)
           

Step 1
Within the folder structure you want create the following

1. a file ".gitignore"
2. ignore folder --- this will hold all files you do not want transmitted

- create the git relationship (and the git folder - hidden)
        -  git init

-  add credentials
        git config --global user.name "NiKole Maxwell"
        git config --global user.email "nvymaxwell@outlook.com"

- get status
        - git status

-link to remote 
          - git remote (nothing should come up)
          - git remote add origin https://github.com/NVyMax/NAME.git (input gitname)
          - git remote (should say origin)

- add existing files to git
        - git add . 
        - get status

Commit files from the staging area to the master
    - git commit -m "Initial commit: Create Repo"
    - OR git commit  "comment"

            THEN
                "i"  to open insert
                remove a # to enter a comment
                ESC :wq
            ----receive / review report    

             - git remote (should say origin)
            - git remote add origin https://github.com/NVyMax/NAME.git (input gitname)
            - git remote (should say origin)

            - git push -u origin master
            - update the readme if necessary


To push after initial changes:
        - git push

To pull to sync
        -git pull


Untracked files will be red after doing git status
        - to add it (git add .)  OR (git add *.html)
        - to remove items from the staging area you can do
            -rm "filename.ext" (rm 'index.html')

Branches
    create branch
    - git branch "name"

    switch back to master
    - git checkout master

merge branch with login
    - git merge "name of branch"
    - enter a short msg to tell why the merge is occuring
    - lots of other things(complicated)

===========================  
git remote rm destination

git remote 
git commit -m "Initial commit: Create Repo"
git remote (confirm remote link)
git remote -v       (check version)
git push -u origin master


===================================

Use the ISSUES section to log a to do list for the project
create each high level thing as task and then mark them as complete as the pushes are sent to the pository


Tasks
Project Milestones
Actual ISSUES
Accomplishments
Redesigns


To create a page for each application loaded

Do the following:

From the console
git init
git status
git checkout -b gh-pages
(will switch to thenew branch)
git status to confirm
git add . (toadd filesforproject)

on profile add new repo
and regular options
copy the console command to create
git push origin gh-pagess
the url will be there live on the project page

***can only host static web pages (js is ok)***